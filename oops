2)
tax interface:
public interface Taxable 
{
    double SALES_TAX = 0.07;  
    double INCOME_TAX = 0.105; 
    double calcTax();
}

Employe class:

public class Employee implements Taxable {
    private int empId;
    private String name;
    private double salary;

    public Employee(int empId, String name, double salary) {
        this.empId = empId;
        this.name = name;
        this.salary = salary;
    }

   
    @Override
    public double calcTax() {
        return salary * INCOME_TAX;  

    public int getEmpId() {
        return empId;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }
}


product class:

public class Product implements Taxable {
    private int pid;
    private double price;
    private int quantity;

  
    public Product(int pid, double price, int quantity) {
        this.pid = pid;
        this.price = price;
        this.quantity = quantity;
    }

   
    @Override
    public double calcTax() {
        return price * SALES_TAX;  
    }

    
    public int getPid() {
        return pid;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}

1)

book class:

public class Book {
    private int bookID;
    private String title;
    private String author;
    private boolean isAvailable;

   
    public Book(int bookID, String title, String author, boolean isAvailable) {
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.isAvailable = isAvailable;
    }

   
    public int getBookID() {
        return bookID;
    }

    public void setBookID(int bookID) {
        this.bookID = bookID;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean isAvailable) {
        this.isAvailable = isAvailable;
    }

    
    public void displayBookDetails() {
        System.out.println("Book ID: " + bookID);
        System.out.println("Title: " + title);
        System.out.println("Author: " + author);
        System.out.println("Available: " + (isAvailable ? "Yes" : "No"));
        
    }
}


Library class:

public class Library {
    private Book[] books;
    private int bookCount;

   
    public Library(int size) {
        books = new Book[size];
        bookCount = 0;
    }

    
    public void addBook(Book book) {
        if (bookCount < books.length) {
            books[bookCount] = book;
            bookCount++;
            System.out.println("Book added successfully!");
        } else {
            System.out.println("Library is full! Cannot add more books.");
        }
    }

    
    public void removeBook(int bookID) {
        boolean found = false;
        for (int i = 0; i < bookCount; i++) {
            if (books[i].getBookID() == bookID) {
                found = true;
                for (int j = i; j < bookCount - 1; j++) {
                    books[j] = books[j + 1];
                }
                books[bookCount - 1] = null;  
                bookCount--;
                System.out.println("Book removed successfully!");
                break;
            }
        }
        if (!found) {
            System.out.println("Book with ID " + bookID + " not found.");
        }
    }

    
    public Book searchBookByID(int bookID) {
        for (int i = 0; i < bookCount; i++) {
            if (books[i].getBookID() == bookID) {
                return books[i];
            }
        }
        return null;  
    }

    
    public void displayAllBooks() {
        if (bookCount == 0) {
            System.out.println("No books in the library.");
        } else {
            for (int i = 0; i < bookCount; i++) {
                books[i].displayBookDetails();
            }
        }
    }
}

system library:

import java.util.Scanner;
public class LibrarySystem 
{
public static void main(String[] args) 
{
        Scanner scanner = new Scanner(System.in);

        
        Library library = new Library(5);

       
        while (true) {
            System.out.println("\nLibrary System Menu:");
            System.out.println("1. Add Book");
            System.out.println("2. Remove Book");
            System.out.println("3. Search Book by ID");
            System.out.println("4. Display All Books");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice)
{
                case 1:
                    
                    System.out.print("Enter Book ID: ");
                    int bookID = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter Book Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Book Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Is the book available (true/false): ");
                    boolean isAvailable = scanner.nextBoolean();
                    Book newBook = new Book(bookID, title, author, isAvailable);
                    library.addBook(newBook);
                    break;

                case 2:
                    
                    System.out.print("Enter Book ID to remove: ");
                    int removeID = scanner.nextInt();
                    library.removeBook(removeID);
                    break;

                case 3:
                    
                    System.out.print("Enter Book ID to search: ");
                    int searchID = scanner.nextInt();
                    Book foundBook = library.searchBookByID(searchID);
                    if (foundBook != null) {
                        System.out.println("Book found:");
                        foundBook.displayBookDetails();
                    } else {
                        System.out.println("Book with ID " + searchID + " not found.");
                    }
                    break;

                case 4:
                    
                    library.displayAllBooks();
                    break;

                case 5:
                    
                    System.out.println("Exiting Library ...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option! Please try again.");
            }
        }
    }
}

